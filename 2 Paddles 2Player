<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Canvas - Two Paddles</title>
  <script src="https://code.jquery.com/jquery-3.1.0.min.js"></script>
  <style>
    canvas {
      border: 1px solid grey;
      display: block;
      margin: auto;
    }
  </style>
</head>
<body>
  <canvas id="canvas-for-ball" width="600" height="400"></canvas>

  <script>
    var canvas = document.getElementById("canvas-for-ball");
    var ctx = canvas.getContext("2d");

    // Ball class
    class Ball {
      constructor(x, y, dx, dy, radius, color) {
        this.x = x;
        this.y = y;
        this.dx = dx;
        this.dy = dy;
        this.radius = radius;
        this.color = color;
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.closePath();
      }

      move() {
        this.x += this.dx;
        this.y += this.dy;

        // bounce off top/bottom walls
        if (this.y - this.radius < 0) {
          this.y = this.radius;
          this.dy *= -1;
        }
        if (this.y + this.radius > canvas.height) {
          this.y = canvas.height - this.radius;
          this.dy *= -1;
        }

        // bounce off left paddle
        if (
          this.x - this.radius <= paddle1.x + paddle1.width &&
          this.y >= paddle1.y &&
          this.y <= paddle1.y + paddle1.height
        ) {
          this.x = paddle1.x + paddle1.width + this.radius;
          this.dx *= -1;
        }

        // bounce off right paddle
        if (
          this.x + this.radius >= paddle2.x &&
          this.y >= paddle2.y &&
          this.y <= paddle2.y + paddle2.height
        ) {
          this.x = paddle2.x - this.radius;
          this.dx *= -1;
        }

        // reset if ball goes off-screen
        if (this.x + this.radius < 0 || this.x - this.radius > canvas.width) {
          this.x = canvas.width / 2;
          this.y = canvas.height / 2;
          this.dx = -this.dx;
        }
      }
    }

    // Paddle class
    class Paddle {
      constructor(x, y, width, height, color) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.color = color;
        this.speed = 7;
        this.movingUp = false;
        this.movingDown = false;
      }

      draw() {
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
      }

      move() {
        if (this.movingUp && this.y > 0) {
          this.y -= this.speed;
        }
        if (this.movingDown && this.y + this.height < canvas.height) {
          this.y += this.speed;
        }
      }
    }

    // Create objects
    var ball = new Ball(300, 200, 3, 2, 10, "red");
    var paddle1 = new Paddle(20, 150, 15, 100, "blue");  // Left
    var paddle2 = new Paddle(565, 150, 15, 100, "green"); // Right

    // Keyboard controls
    $(document.body).on("keydown", function (e) {
      switch (e.which) {
        // Paddle 1 (W/S)
        case 87: // W
          paddle1.movingUp = true;
          break;
        case 83: // S
          paddle1.movingDown = true;
          break;

        // Paddle 2 (Up/Down)
        case 38:
          paddle2.movingUp = true;
          break;
        case 40:
          paddle2.movingDown = true;
          break;
      }
    });

    $(document.body).on("keyup", function (e) {
      switch (e.which) {
        case 87:
          paddle1.movingUp = false;
          break;
        case 83:
          paddle1.movingDown = false;
          break;
        case 38:
          paddle2.movingUp = false;
          break;
        case 40:
          paddle2.movingDown = false;
          break;
      }
    });

    function gameLoop() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      ball.move();
      ball.draw();

      paddle1.move();
      paddle1.draw();

      paddle2.move();
      paddle2.draw();

      requestAnimationFrame(gameLoop);
    }

    gameLoop();
  </script>
</body>
</html>
